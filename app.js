// –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Socket.IO
const socket = io(window.location.origin);

socket.on('connect', () => {
    console.log('Connected to server');
});

socket.on('error', (message) => {
    tg.showAlert(message);
});

socket.on('gameCreated', (game) => {
    currentGame = game;
    showWaitingRoom(game);
});

socket.on('gameUpdated', (game) => {
    if (currentGame && game.id === currentGame.id) {
        currentGame = game;
        updateWaitingRoom(game);
    }
});

socket.on('gameListUpdated', (games) => {
    currentGames = games;
    if (document.querySelector('.game-list-menu').style.display !== 'none') {
        refreshGamesList();
    }
});

socket.on('gameStarting', (game) => {
    if (currentGame && game.id === currentGame.id) {
        startGame();
    }
});

// –í –Ω–∞—á–∞–ª–µ app.js –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
const GAME_SETTINGS = {
    bullet: {
        speed: 0.030,      
        minSpeed: 0.030,   
        maxSpeed: 0.2,     // –£–º–µ–Ω—å—à–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –ø—É–ª–∏
        size: 1,
        reloadTime: 5000,
        maxReloadTime: 5000,
        minReloadTime: 2000  // –£–≤–µ–ª–∏—á–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏
    },
    tank: {
        moveSpeed: 0.02,    
        minMoveSpeed: 0.02,
        maxMoveSpeed: 0.1   // –û—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å
    }
};

// –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–∏–º —Å—á–µ—Ç—á–∏–∫–∏
const upgradeCounters = {
    tankSpeed: 0,
    bulletSpeed: 0,
    reloadTime: 0
};

// –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–∏–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–ø—Ä–∞–π—Ç–æ–≤
const customSprites = {
    tank: null
};

let tg = window.Telegram.WebApp;
let currentTool = 'wall';
let gridSize = 16;
let gameField;
let tanks = [];
let keydownHandler = null;
let keyupHandler = null;
let pressedKeys = new Set();
let previousKeys = new Set();
let currentColor = '#1B5E20';
let isDrawing = false;

// –î–æ–±–∞–≤–∏–º –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ —Å–µ—Ç–∫–∏ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ —Å–ø—Ä–∞–π—Ç–æ–≤
const SPRITE_GRID_SIZE = 1;

// –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ç–∞–Ω–∫–∞
let selectedTankType = 'default';

// –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å–ø—Ä–∞–π—Ç–∞
function createDefaultTankSprite() {
    const canvas = document.createElement('canvas');
    canvas.width = 80;
    canvas.height = 80;
    const ctx = canvas.getContext('2d');
    
    ctx.fillStyle = '#1a1a1a';
    ctx.fillRect(0, 0, 80, 80);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–Ω–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
    // –ü–µ—Ä–≤—ã–π —Ü–≤–µ—Ç - —Ü–≤–µ—Ç –∫–æ—Ä–ø—É—Å–∞ (#1B5E20)
    // –¢—Ä–µ—Ç–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä - —Ü–≤–µ—Ç –±–∞—à–Ω–∏ (#4CAF50)
    const tempTank = new Tank(0, 0, { cellSize: 16 }, '#1B5E20', null, '#4CAF50');
    tempTank.direction = 0;
    
    tempTank.draw(ctx);
    
    return canvas.toDataURL();
}

// –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ canvas
const tempCanvas = document.createElement('canvas');
const tempCtx = tempCanvas.getContext('2d');

// –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è FPS
const FPS = 60;
const frameDelay = 1000 / FPS;
let lastFrameTime = 0;

// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤
const ResourceManager = {
    images: new Map(),
    
    loadImage(key, url) {
        return new Promise((resolve, reject) => {
            const img = new Image();
            img.onload = () => {
                this.images.set(key, img);
                resolve(img);
            };
            img.onerror = reject;
            img.src = url;
        });
    },
    
    getImage(key) {
        return this.images.get(key);
    },
    
    clearImages() {
        this.images.clear();
    }
};

// –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
let isGameActive = false;

// –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—á–∏—Å—Ç–∫–∏
const CleanupSystem = {
    interval: null,
    
    start() {
        this.interval = setInterval(() => this.cleanup(), 5000);
    },
    
    stop() {
        if (this.interval) {
            clearInterval(this.interval);
            this.interval = null;
        }
    },
    
    cleanup() {
        // –û—á–∏—â–∞–µ–º –ø—É–ª–∏
        tanks.forEach(tank => {
            if (tank) {
                tank.bullets = tank.bullets.filter(bullet => 
                    bullet.active && 
                    bullet.x >= 0 && bullet.x < gameField.width &&
                    bullet.y >= 0 && bullet.y < gameField.height
                );
            }
        });
        
        // –û—á–∏—â–∞–µ–º —Ç–∞–Ω–∫–∏
        tanks = tanks.filter(tank => tank && !tank.isDestroyed);
        gameField.tanks = tanks;
        
        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
        if (!isGameActive) {
            gameField.clearTextureCache();
        }
    },
    
    fullCleanup() {
        this.stop();
        
        // –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        if (keydownHandler) {
            document.removeEventListener('keydown', keydownHandler);
            keydownHandler = null;
        }
        if (keyupHandler) {
            document.removeEventListener('keyup', keyupHandler);
            keyupHandler = null;
        }
        
        // –û—á–∏—â–∞–µ–º —Ç–∞–Ω–∫–∏
        tanks.forEach(tank => {
            if (tank) tank.cleanup();
        });
        tanks = [];
        gameField.tanks = [];
        
        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—ã
        gameField.clearTextureCache();
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        pressedKeys.clear();
        previousKeys.clear();
        
        // –û—á–∏—â–∞–µ–º canvas
        tempCtx.clearRect(0, 0, tempCanvas.width, tempCanvas.height);
    }
};

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é setGameState
function setGameState(active) {
    isGameActive = active;
    if (active) {
        CleanupSystem.start();
    } else {
        CleanupSystem.fullCleanup();
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentGame = null;
let currentTeam = null;
let isReady = false;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã
function createGame(type) {
    socket.emit('createGame', {
        type: type,
        playerId: tg.initDataUnsafe.user.id,
        playerName: tg.initDataUnsafe.user.first_name
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã –æ–∂–∏–¥–∞–Ω–∏—è
function showWaitingRoom(game) {
    hideAllMenus();
    const waitingRoom = document.querySelector('.waiting-room');
    waitingRoom.style.display = 'block';

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º—Ü–∏—é –æ–± –∏–≥—Ä–µ
    const gameTypeInfo = waitingRoom.querySelector('.game-type-info');
    gameTypeInfo.textContent = `–¢–∏–ø –∏–≥—Ä—ã: ${game.type}`;
    
    updatePlayersList(game);
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
function updatePlayersList(game) {
    const playersList = document.querySelector('.players-list');
    playersList.innerHTML = '';
    
    game.players.forEach(player => {
        const playerElement = document.createElement('div');
        playerElement.className = 'player-item';
        playerElement.innerHTML = `
            <span>${player.name}</span>
            <span>${player.team === 0 ? 'üü¢' : player.team === 1 ? 'üî¥' : '‚ö™'}</span>
            <span>${player.ready ? '‚úÖ' : '‚è≥'}</span>
        `;
        playersList.appendChild(playerElement);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ
function joinGame(gameId) {
    socket.emit('joinGame', {
        gameId: gameId,
        playerId: tg.initDataUnsafe.user.id,
        playerName: tg.initDataUnsafe.user.first_name
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä
function refreshGamesList() {
    const gamesContainer = document.querySelector('.games-container');
    gamesContainer.innerHTML = '';

    currentGames.forEach(game => {
        if (game.status === 'waiting') {
            const gameElement = document.createElement('div');
            gameElement.className = 'game-item';
            gameElement.innerHTML = `
                <div class="game-info">
                    <div class="game-type-label">${game.type}</div>
                    <div class="players-count">–ò–≥—Ä–æ–∫–æ–≤: ${game.players.length}/${game.maxPlayers}</div>
                </div>
                <button class="join-button" data-game-id="${game.id}">
                    –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
                </button>
            `;
            
            gameElement.querySelector('.join-button').addEventListener('click', () => {
                joinGame(game.id);
            });
            
            gamesContainer.appendChild(gameElement);
        }
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
document.addEventListener('DOMContentLoaded', () => {
    // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏ÔøΩÔøΩ –∏–≥—Ä—ã
    document.getElementById('createGame').addEventListener('click', () => {
        hideAllMenus();
        document.querySelector('.game-creation-menu').style.display = 'block';
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–∏–ø–æ–≤ –∏–≥—Ä
    document.querySelectorAll('.game-type').forEach(button => {
        button.addEventListener('click', (e) => {
            createGame(e.target.dataset.type);
        });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–≥—Ä—ã
    document.getElementById('selectGame').addEventListener('click', () => {
        hideAllMenus();
        document.querySelector('.game-list-menu').style.display = 'block';
        refreshGamesList();
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã
    document.querySelectorAll('.team-button').forEach(button => {
        button.addEventListener('click', (e) => {
            const team = e.target.classList.contains('team-green') ? 0 : 1;
            selectTeam(team);
        });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    document.querySelector('.ready-button').addEventListener('click', toggleReady);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∏–≥—Ä—ã
    document.querySelector('.leave-button').addEventListener('click', leaveGame);
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function hideAllMenus() {
    const menus = [
        '.menu',
        '.game-creation-menu',
        '.game-list-menu',
        '.waiting-room',
        '.tank-selector',
        '.sprite-editor'
    ];
    menus.forEach(menu => {
        document.querySelector(menu).style.display = 'none';
    });
}

function selectTeam(team) {
    if (!currentGame) return;
    
    socket.emit('selectTeam', {
        gameId: currentGame.id,
        playerId: tg.initDataUnsafe.user.id,
        team: team
    });
}

function toggleReady() {
    if (!currentGame) return;
    
    socket.emit('toggleReady', {
        gameId: currentGame.id,
        playerId: tg.initDataUnsafe.user.id
    });
}

function leaveGame() {
    if (!currentGame) return;
    
    socket.emit('leaveGame', {
        gameId: currentGame.id,
        playerId: tg.initDataUnsafe.user.id
    });
    
    currentGame = null;
    currentTeam = null;
    isReady = false;
}

function checkGameStart() {
    if (!currentGame) return;
    
    const allPlayersReady = currentGame.players.every(p => p.ready);
    const teamsBalanced = checkTeamsBalance();
    
    if (allPlayersReady && teamsBalanced) {
        startGame();
    }
}

function checkTeamsBalance() {
    if (!currentGame) return false;
    
    const teamCounts = currentGame.players.reduce((acc, player) => {
        if (player.team === 0) acc.green++;
        if (player.team === 1) acc.red++;
        return acc;
    }, { green: 0, red: 0 });
    
    return teamCounts.green === teamCounts.red;
}

function startGame() {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
    console.log('Starting game:', currentGame);
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
    showMapEditor();
}

document.addEventListener('DOMContentLoaded', async () => {
    tg.expand();
    tg.ready();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø—Ä–∞–π—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ç–∞–Ω–∫–∞ —Å—Ä–∞–∑—É
    const defaultPreview = document.querySelector('.tank-preview.default');
    defaultPreview.style.backgroundImage = `url(${createDefaultTankSprite()})`;
    defaultPreview.style.backgroundSize = 'contain';
    defaultPreview.style.backgroundRepeat = 'no-repeat';
    defaultPreview.style.backgroundPosition = 'center';

    const canvas = document.getElementById('gameCanvas');
    const ctx = canvas.getContext('2d');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
    const fieldWidth = Math.floor(canvas.width / gridSize);
    const fieldHeight = Math.floor(canvas.height / gridSize);
    gameField = new GameField(fieldWidth, fieldHeight, gridSize);

    // –£–±–∏—Ä–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–ø—Ä–∞–π—Ç–æ–≤ –ø–æ–∫–∞ –∏—Ö –Ω–µ—Ç
    /* await Promise.all([
        spriteManager.loadSprite('wall', 'assets/wall.png'),
        spriteManager.loadSprite('empty', 'assets/empty.png')
    ]); */

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    document.getElementById('createGame').addEventListener('click', () => {
        console.log('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã');
    });

    document.getElementById('selectGame').addEventListener('click', () => {
        console.log('–í—ã–±–æ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏–≥—Ä—ã');
    });

    document.getElementById('selectTank').addEventListener('click', () => {
        document.querySelector('.menu').style.display = 'none';
        document.querySelector('.tank-selector').style.display = 'block';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
        document.querySelector('.tank-stats .stat-row:nth-child(2) label').textContent = 
            `–°–∫–æ—Ä–æ—Å—Ç—å —Ç–∞–Ω–∫–∞ (${upgradeCounters.tankSpeed})`;
        document.querySelector('.tank-stats .stat-row:nth-child(3) label').textContent = 
            `–°–∫–æ—Ä–æ—Å—Ç—å –ø—É–ª–∏ (${upgradeCounters.bulletSpeed})`;
        document.querySelector('.tank-stats .stat-row:nth-child(4) label').textContent = 
            `–°–∫–æ—Ä–æ—Å—Ç—å —Å—Ç—Ä–µ–ª—å–±—ã (${upgradeCounters.reloadTime})`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã
        document.getElementById('tankSpeedProgress').style.width = 
            `${((GAME_SETTINGS.tank.moveSpeed - GAME_SETTINGS.tank.minMoveSpeed) / (GAME_SETTINGS.tank.maxMoveSpeed - GAME_SETTINGS.tank.minMoveSpeed)) * 100}%`;
        
        document.getElementById('bulletSpeedProgress').style.width = 
            `${((GAME_SETTINGS.bullet.speed - GAME_SETTINGS.bullet.minSpeed) / (GAME_SETTINGS.bullet.maxSpeed - GAME_SETTINGS.bullet.minSpeed)) * 100}%`;
        
        document.getElementById('reloadTimeProgress').style.width = 
            `${((GAME_SETTINGS.bullet.maxReloadTime - GAME_SETTINGS.bullet.reloadTime) / (GAME_SETTINGS.bullet.maxReloadTime - GAME_SETTINGS.bullet.minReloadTime)) * 100}%`;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ª—É—á—à–µ–Ω–∏—è
        document.querySelector('.tank-stats').addEventListener('click', (e) => {
            if (e.target.classList.contains('upgrade-btn')) {
                const upgradeType = e.target.dataset.upgrade;
                
                if (upgradeType === 'tankSpeed') {
                    const currentSpeed = GAME_SETTINGS.tank.moveSpeed;
                    if (currentSpeed < GAME_SETTINGS.tank.maxMoveSpeed) {
                        upgradeCounters.tankSpeed++;
                        const newSpeed = Math.min(currentSpeed + 0.001, GAME_SETTINGS.tank.maxMoveSpeed);
                        GAME_SETTINGS.tank.moveSpeed = newSpeed;
                        document.querySelector('.tank-stats .stat-row:nth-child(2) label').textContent = 
                            `–°–∫–æ—Ä–æ—Å—Ç—å —Ç–∞–Ω–∫–∞ (${upgradeCounters.tankSpeed})`;
                        document.getElementById('tankSpeedProgress').style.width = 
                            `${((newSpeed - GAME_SETTINGS.tank.minMoveSpeed) / (GAME_SETTINGS.tank.maxMoveSpeed - GAME_SETTINGS.tank.minMoveSpeed)) * 100}%`;
                        tanks.forEach(tank => {
                            if (tank) tank.moveSpeed = newSpeed;
                        });
                    }
                }
                
                else if (upgradeType === 'bulletSpeed') {
                    const currentSpeed = GAME_SETTINGS.bullet.speed;
                    if (currentSpeed < GAME_SETTINGS.bullet.maxSpeed) {
                        upgradeCounters.bulletSpeed++;
                        const newSpeed = Math.min(currentSpeed + 0.001, GAME_SETTINGS.bullet.maxSpeed);
                        GAME_SETTINGS.bullet.speed = newSpeed;
                        document.querySelector('.tank-stats .stat-row:nth-child(3) label').textContent = 
                            `–°–∫–æ—Ä–æ—Å—Ç—å –ø—É–ª–∏ (${upgradeCounters.bulletSpeed})`;
                        document.getElementById('bulletSpeedProgress').style.width = 
                            `${((newSpeed - GAME_SETTINGS.bullet.minSpeed) / (GAME_SETTINGS.bullet.maxSpeed - GAME_SETTINGS.bullet.minSpeed)) * 100}%`;
                    }
                }
                
                else if (upgradeType === 'reloadTime') {
                    const currentTime = GAME_SETTINGS.bullet.reloadTime;
                    if (currentTime > GAME_SETTINGS.bullet.minReloadTime) {
                        upgradeCounters.reloadTime++;
                        const newTime = Math.max(currentTime - 10, GAME_SETTINGS.bullet.minReloadTime);
                        GAME_SETTINGS.bullet.reloadTime = newTime;
                        document.querySelector('.tank-stats .stat-row:nth-child(4) label').textContent = 
                            `–°–∫–æ—Ä–æ—Å—Ç—å —Å—Ç—Ä–µ–ª—å–±—ã (${upgradeCounters.reloadTime})`;
                        document.getElementById('reloadTimeProgress').style.width = 
                            `${((GAME_SETTINGS.bullet.maxReloadTime - newTime) / (GAME_SETTINGS.bullet.maxReloadTime - GAME_SETTINGS.bullet.minReloadTime)) * 100}%`;
                        tanks.forEach(tank => {
                            if (tank) {
                                tank.reloadTime = newTime;
                                tank.lastShotTime = Date.now() - newTime;
                            }
                        });
                    }
                }
            }
        });
    });

    document.getElementById('createMap')?.addEventListener('click', () => {
        console.log('–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã');
        try {
            showMapEditor();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞:', error);
        }
    });

    document.getElementById('createSprite').addEventListener('click', () => {
        console.log('–û—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å–ø—Ä–∞–π—Ç–æ–≤');
        document.querySelector('.menu').style.display = 'none';
        document.querySelector('.sprite-editor').style.display = 'block';
        document.getElementById('gameCanvas').style.display = 'none';
        initSpriteEditor(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å–ø—Ä–∞–π—Ç–æ–≤
    });

    function showMapEditor() {
        console.log('–û—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä –∫–∞—Ä—Ç—ã');
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏–≥—Ä—É
        setGameState(true);
        
        // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ —Ç–∞–Ω–∫–æ–≤
        tanks = [];
        gameField.tanks = tanks;
        
        // –°–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
        const menu = document.querySelector('.menu');
        if (menu) {
            menu.style.display = 'none';
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º canvas
        const canvas = document.getElementById('gameCanvas');
        canvas.style.display = 'block';
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas
        canvas.width = 368;
        canvas.height = 698;
        
        // –û—á–∏—â–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π canvas
        tempCanvas.width = canvas.width;
        tempCanvas.height = canvas.height;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
        const fieldWidth = Math.floor(canvas.width / gridSize);
        const fieldHeight = Math.floor(canvas.height / gridSize);
        gameField = new GameField(fieldWidth, fieldHeight, gridSize);
        
        // –ó–∞–ø—É—Å–∫–∞–µÔøΩÔøΩ –æ—Ç—Ä–∏—Å–æ–≤–∫—É
        requestAnimationFrame(draw);
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        const oldTools = document.querySelector('.editor-tools');
        if (oldTools) {
            oldTools.remove();
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        const editorTools = document.createElement('div');
        editorTools.className = 'editor-tools';
        editorTools.innerHTML = `
            <button class="tool-button" data-tool="wall">–°—Ç–µ–Ω–∞</button>
            <button class="tool-button" data-tool="empty">–ü—É—Å—Ç–æ—Ç–∞</button>
            <button class="tool-button" data-tool="bush">–ö—É—Å—Ç</button>
            <button class="tool-button" data-tool="water">–í–æ–¥–∞</button>
            <button class="tool-button" data-tool="spawn">–¢–æ—á–∫–∞ —Å–ø–∞–≤–Ω–∞</button>
            <button id="testTank1">–¢–∞–Ω–∫ 1</button>
            <button id="testTank2">–¢–∞–Ω–∫ 2</button>
            <button id="saveMap">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
            <button id="backToMenu">–ù–∞–∑–∞–¥</button>
        `;
        
        const container = document.querySelector('.container');
        if (container) {
            container.appendChild(editorTools);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–∞–Ω–∫–æ–≤ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –≤ DOM
            document.getElementById('testTank1').addEventListener('click', () => {
                if (!tanks[0]) {
                    const startX = Math.floor(gameField.width / 4) - 2;
                    const startY = Math.floor(gameField.height / 2) - 3;
                    
                    if (gameField.isTankAreaClear(startX, startY, 5, 5)) {
                        const sprite = selectedTankType === 'custom' ? customSprites.tank : null;
                        tanks[0] = new Tank(startX, startY, gameField, '#1B5E20', sprite, '#4CAF50');
                        gameField.tanks = tanks;
                    }
                }
            });

            document.getElementById('testTank2').addEventListener('click', () => {
                if (!tanks[1]) {
                    const startX = Math.floor(gameField.width * 3/4) - 2;
                    const startY = Math.floor(gameField.height / 2) - 3;
                    
                    if (gameField.isTankAreaClear(startX, startY, 5, 5)) {
                        tanks[1] = new Tank(startX, startY, gameField, '#1B5E20', null, '#4CAF50');
                        gameField.tanks = tanks;
                    }
                }
            });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏—à
        if (keydownHandler) {
            document.removeEventListener('keydown', keydownHandler);
        }
        if (keyupHandler) {
            document.removeEventListener('keyup', keyupHandler);
        }
        keydownHandler = handleTankControl;
        keyupHandler = handleKeyUp;
        document.addEventListener('keydown', keydownHandler);
        document.addEventListener('keyup', keyupHandler);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        editorTools.addEventListener('click', (e) => {
            if (e.target.dataset.tool) {
                currentTool = e.target.dataset.tool;
                // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
                document.querySelectorAll('.tool-button').forEach(btn => {
                    btn.classList.remove('active');
                });
                e.target.classList.add('active');
            }
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è canvas
        canvas.addEventListener('click', handleCanvasClick);
        canvas.addEventListener('mousemove', handleCanvasMouseMove);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–Ω–∫–∏ –≤ gameField –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π
        gameField.tanks = tanks;
    }

    function handleCanvasClick(e) {
        const rect = canvas.getBoundingClientRect();
        const x = Math.floor((e.clientX - rect.left) / gridSize);
        const y = Math.floor((e.clientY - rect.top) / gridSize);
        
        gameField.setCell(x, y, currentTool);
    }

    function handleCanvasMouseMove(e) {
        if (e.buttons === 1) { // –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –ª–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏
            handleCanvasClick(e);
        }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º throttling –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
    const targetFPS = isMobile ? 30 : 60;
    const frameDelay = 1000 / targetFPS;

    // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é draw
    function draw(currentTime) {
        // –ù–µ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º, –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
        if (!isGameActive) {
            requestAnimationFrame(draw);
            return;
        }

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–¥—Ä –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
        if (currentTime - lastFrameTime < frameDelay) {
            requestAnimationFrame(draw);
            return;
        }
        lastFrameTime = currentTime;

        // –û—á–∏—â–∞–µ–º canvas
        tempCtx.fillStyle = '#000000';
        tempCtx.fillRect(0, 0, tempCanvas.width, tempCanvas.height);
        
        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
        gameField.draw(tempCtx);
        
        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–∞–Ω–∫–æ–≤
        if (tanks && tanks.length > 0) {
            tanks.forEach((tank, index) => {
                if (tank && !tank.isDestroyed) {
                    tempCtx.save();
                    tempCtx.globalAlpha = 1.0;
                    tempCtx.globalCompositeOperation = 'source-over';
                    tank.draw(tempCtx);
                    
                    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—É–ª—å —Ç–∞–Ω–∫–∞
                    tank.bullets.forEach(bullet => {
                        if (bullet && bullet.active) {
                            bullet.draw(tempCtx);
                        }
                    });
                    tempCtx.restore();
                }
            });
        }

        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫—É—Å—Ç–æ–≤ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ
        gameField.drawBushes(tempCtx);

        // –ö–æ–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π canvas
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.drawImage(tempCanvas, 0, 0);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if (isGameActive) {
            updateTanks();
        }

        requestAnimationFrame(draw);
    }

    draw();

    // –î–æ–±–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    document.addEventListener('click', (e) => {
        if (e.target.id === 'backToMenu') {
            // –£–¥–∞–ª—è–µ–º –ø–∞–Ω–µ–ª–∏
            const editorTools = document.querySelector('.editor-tools');
            if (editorTools) {
                editorTools.remove();
            }
            
            const settingsPanel = document.querySelector('.settings-panel');
            if (settingsPanel) {
                settingsPanel.remove();
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∏ canvas
            document.querySelector('.menu').style.display = 'flex';
            document.getElementById('gameCanvas').style.display = 'block';
            
            // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏—à
            if (keydownHandler) {
                document.removeEventListener('keydown', keydownHandler);
            }
            if (keyupHandler) {
                document.removeEventListener('keyup', keyupHandler);
            }
            
            // –û—á–∏—â–∞–µ–º —Ç–∞–Ω–∫–∏
            tanks = [];
            gameField.tanks = [];
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
            gameField.initGrid();
            
            // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π canvas
            tempCtx.clearRect(0, 0, tempCanvas.width, tempCanvas.height);
            
            // –û—á–∏—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π canvas
            const canvas = document.getElementById('gameCanvas');
            const ctx = canvas.getContext('2d');
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // –û—Å—Ç–∞–Ω–∞–≤ÔøΩÔøΩ–∏–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
            setGameState(false);
        }
    });

    // –î–æ–±–∞–≤–∏–º –æ–±–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∞–Ω–∫–∞
    document.querySelectorAll('.tank-option').forEach(option => {
        option.addEventListener('click', () => {
            document.querySelectorAll('.tank-option').forEach(opt => 
                opt.classList.remove('selected'));
            option.classList.add('selected');
            selectedTankType = option.classList.contains('default-tank') ? 'default' : 'custom';
        });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å"
    document.getElementById('selectTankBtn').addEventListener('click', () => {
        document.querySelector('.tank-selector').style.display = 'none';
        document.querySelector('.menu').style.display = 'flex';
    });

    // –±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–¥"
    document.getElementById('backFromTankSelect').addEventListener('click', () => {
        document.querySelector('.tank-selector').style.display = 'none';
        document.querySelector('.menu').style.display = 'flex';
    });
}); 

// –§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–Ω–∫–æ–º
function handleTankControl(e) {
    pressedKeys.add(e.key.toLowerCase());
}

function handleKeyUp(e) {
    pressedKeys.delete(e.key.toLowerCase());
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∞–Ω–∫–∞
function updateTanks() {
    tanks.forEach(tank => {
        if (tank && !tank.isDestroyed) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É–ª–∏
            tank.bullets.forEach(bullet => {
                if (bullet.active) {
                    bullet.update();
                }
            });
        }
    });

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–≤—ã–º —Ç–∞–Ω–∫–æ–º
    if (tanks[0] && !tanks[0].isDestroyed) {
        if (pressedKeys.has('arrowup')) tanks[0].moveForward();
        if (pressedKeys.has('arrowdown')) tanks[0].moveBackward();
        if (pressedKeys.has('arrowleft') && !previousKeys.has('arrowleft')) {
            tanks[0].rotateLeft();
        }
        if (pressedKeys.has('arrowright') && !previousKeys.has('arrowright')) {
            tanks[0].rotateRight();
        }
        if (pressedKeys.has(' ')) tanks[0].shoot();
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ç–æ—Ä—ã–º —Ç–∞–Ω–∫–æ–º
    if (tanks[1] && !tanks[1].isDestroyed) {
        if (pressedKeys.has('w')) tanks[1].moveForward();
        if (pressedKeys.has('s')) tanks[1].moveBackward();
        if (pressedKeys.has('a') && !previousKeys.has('a')) {
            tanks[1].rotateLeft();
        }
        if (pressedKeys.has('d') && !previousKeys.has('d')) {
            tanks[1].rotateRight();
        }
        if (pressedKeys.has('e')) tanks[1].shoot();
    }

    previousKeys = new Set(pressedKeys);
} 

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Å–ø—Ä–∞–π—Ç–æ–≤
function initSpriteEditor() {
    const canvas = document.getElementById('spriteCanvas');
    const ctx = canvas.getContext('2d');
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    const handlers = {
        mousedown: handleMouseDown,
        mousemove: handleMouseMove,
        mouseup: handleMouseUp,
        mouseleave: handleMouseUp
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±ÔøΩÔøΩ–∞–±–æ—Ç—á–∏–∫–∏
    Object.entries(handlers).forEach(([event, handler]) => {
        canvas.addEventListener(event, handler);
    });
    
    // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    function cleanupSpriteEditor() {
        Object.entries(handlers).forEach(([event, handler]) => {
            canvas.removeEventListener(event, handler);
        });
        ctx.clearRect(0, 0, canvas.width, canvas.height);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∏—Å—Ç–∫—É –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
    document.getElementById('backToMenu').addEventListener('click', () => {
        cleanupSpriteEditor();
        document.querySelector('.sprite-editor').style.display = 'none';
        document.querySelector('.menu').style.display = 'flex';
    });
} 

// ÔøΩÔøΩ –æ–±—Ä–∞–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥" –∏ "–í—ã–±—Ä–∞—Ç—å"
function cleanupTankSelector() {
    document.querySelector('.tank-selector').style.display = 'none';
    document.querySelector('.menu').style.display = 'flex';
    // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∏ –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫
    document.querySelector('.toggle-settings')?.remove();
    document.querySelector('.settings-panel')?.remove();
}

document.getElementById('selectTankBtn').addEventListener('click', cleanupTankSelector);
document.getElementById('backFromTankSelect').addEventListener('click', cleanupTankSelector); 

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', () => {
    setGameState(false);
});

// –ü—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏ –º–Ω—é
function switchSection(sectionId) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã
    document.querySelectorAll('.section').forEach(section => {
        section.style.display = 'none';
    });
    
    // –û—á–∏—â–∞–µ–º canvas –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const canvas = document.getElementById('gameCanvas');
    if (canvas) {
        const ctx = canvas.getContext('2d');
        ctx.clearRect(0, 0, canvas.width, canvas.height);
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª
    document.getElementById(sectionId).style.display = 'block';
}

// –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
let currentGames = [];

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ DOMContentLoaded
document.addEventListener('DOMContentLoaded', async () => {
    // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    document.getElementById('createGame').addEventListener('click', () => {
        hideAllMenus();
        document.querySelector('.game-creation-menu').style.display = 'block';
    });

    document.getElementById('selectGame').addEventListener('click', () => {
        hideAllMenus();
        document.querySelector('.game-list-menu').style.display = 'block';
        refreshGamesList();
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥"
    document.querySelectorAll('.back-button').forEach(button => {
        button.addEventListener('click', () => {
            hideAllMenus();
            document.querySelector('.menu').style.display = 'flex';
        });
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä
    document.querySelector('.refresh-button').addEventListener('click', refreshGamesList);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É"
    document.querySelector('.leave-button').addEventListener('click', () => {
        leaveGame();
        hideAllMenus();
        document.querySelector('.menu').style.display = 'flex';
    });

    // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...
});

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
function checkGameState() {
    if (!currentGame) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
    if (currentGame.players.length < 2) {
        tg.showAlert('–û–∂–∏–¥–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤...');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–æ–≤
    const allReady = currentGame.players.every(player => player.ready);
    if (!allReady) {
        tg.showAlert('–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤...');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∫–æ–º–∞–Ω–¥
    const teams = currentGame.players.reduce((acc, player) => {
        if (player.team === 0) acc.team0++;
        if (player.team === 1) acc.team1++;
        return acc;
    }, { team0: 0, team1: 0 });

    if (teams.team0 !== teams.team1) {
        tg.showAlert('–ö–æ–º–∞–Ω–¥—ã –Ω–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã!');
        return;
    }

    // –ï—Å–ª–∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
    startGame();
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é startGame
function startGame() {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–µ–Ω—é
    hideAllMenus();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
    const canvas = document.getElementById('gameCanvas');
    canvas.style.display = 'block';
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
    const fieldWidth = Math.floor(canvas.width / gridSize);
    const fieldHeight = Math.floor(canvas.height / gridSize);
    gameField = new GameField(fieldWidth, fieldHeight, gridSize);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–Ω–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    currentGame.players.forEach((player, index) => {
        const isTeamGreen = player.team === 0;
        const startX = isTeamGreen ? 
            Math.floor(gameField.width / 4) - 2 : 
            Math.floor(gameField.width * 3/4) - 2;
        const startY = Math.floor(gameField.height / 2) - 3;
        
        if (gameField.isTankAreaClear(startX, startY, 5, 5)) {
            const tank = new Tank(
                startX, 
                startY, 
                gameField, 
                isTeamGreen ? '#1B5E20' : '#B71C1C',
                null,
                isTeamGreen ? '#4CAF50' : '#F44336'
            );
            tanks.push(tank);
        }
    });
    
    gameField.tanks = tanks;
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏–≥—Ä—É
    setGameState(true);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
    requestAnimationFrame(draw);
}